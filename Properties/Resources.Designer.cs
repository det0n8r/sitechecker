//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XDSiteChecker.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("XDSiteChecker.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $Snapins = &quot;Citrix.ADIdentity.Admin&quot;,&quot;Citrix.Broker.Admin&quot;,&quot;Citrix.Configuration.Admin&quot;,&quot;Citrix.Host.Admin&quot;,&quot;Citrix.MachineCreation.Admin&quot;
        ///$MissingSnapins=@()
        ///$FoundMissingSnapin=$false
        ///$LoadedSnapins = @()
        ///$RegisteredSnapins = @()
        ///$LoadedSnapins += get-pssnapin -Registered -Name Citrix* | % {$_.name}
        ///
        ///foreach ($Snapin in $Snapins)
        ///{
        ///	#check if the snapin is registered
        ///	if (!($LoadedSnapins -match $snapin))
        ///	{
        ///		$MissingSnapins += $Snapin
        ///	}
        ///}
        ///if ($MissingSnapins)
        ///{
        ///	foreach ($snapin in $mi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CheckNeededSnapins {
            get {
                return ResourceManager.GetString("CheckNeededSnapins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///$desktop = get-brokerdesktop -DNSName $var1 -AdminAddress $var2
        ///$event = get-eventlog -computername $desktop.DNSName -logname application -source &quot;Citrix Desktop Service&quot; -newest 1 -EntryType Warning -message *objectsid* -after $desktop.LastDeregistrationTime
        ///if ($event)
        ///{
        ///     Write-output &quot;$($event.Timewritten)&quot;
        ///}
        ///else {write-output &quot;Not Found&quot;}.
        /// </summary>
        internal static string CheckObjectSIDError {
            get {
                return ResourceManager.GetString("CheckObjectSIDError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.Broker*
        ///asnp citrix.Configuration*
        ///$instances = Get-ConfigRegisteredServiceInstance -AdminAddress $var1
        ///$site = Get-BrokerSite
        ///foreach ($instance in $instances)
        ///{
        ///	if($instance.ServiceGroupName -ne $site.Name)
        ///	{	
        ///		Write-Output &quot;$($instance.ServiceGroupName),$($instance.ServiceInstanceUid),$($instance.Address)&quot;
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string CheckServiceGroupNames {
            get {
                return ResourceManager.GetString("CheckServiceGroupNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $computer = $var1
        ///
        ///$result = Test-Connection -Quiet -Computer $computer -TimeToLive 5
        ///if ($result -eq $true)
        ///{
        ///	try
        ///	{
        ///		$os = Get-WmiObject Win32_OperatingSystem -computername $computer -ea stop
        ///	}
        ///	catch {}
        ///	if ($os) 
        ///	{
        ///	    $lastboot=$os.ConvertToDateTime($os.lastbootuptime)
        ///	    $uptime=(get-date) - ($os.ConvertToDateTime($os.lastbootuptime))
        ///		if ($uptime.Days -gt 0)
        ///		{
        ///			$timeup += &quot;$($uptime.Days.ToString().Split(&apos;.&apos;)[0]) days &quot;
        ///		}
        ///		if ($uptime.Hours -gt 0)
        ///		{
        ///			$timeup +=  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CheckWorker {
            get {
                return ResourceManager.GetString("CheckWorker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///function Get-PowerAction {
        ///	Param([string]$computername=$(Throw &quot;You must specify a computer name.&quot;))	
        ///	foreach ($action in get-brokerhostingpoweraction -AdminAddress $var6 -DNSName $computername -MaxRecordCount 1 -SortBy -&apos;ActionCompletionTime&apos;)	
        ///	{
        ///	 $desktop = Get-BrokerDesktop -MachineName $action.MachineName
        ///	 switch ($action.ActualPriority)
        ///	 {
        ///	 10 { $actionsource = &quot;&apos;User-driven restart ($($action.State))&apos;&quot; }
        ///	 20 { $actionsource = &quot;Session Launch ($($action.State))&quot; }
        ///	 30  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CheckWorkers {
            get {
                return ResourceManager.GetString("CheckWorkers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$hu = $var1; Set-BrokerHypervisorConnection -AdminAddress $var2 –Name $hu -PreferredController $null
        ///.
        /// </summary>
        internal static string ClearPreferredHypervisor {
            get {
                return ResourceManager.GetString("ClearPreferredHypervisor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$c = get-brokercontroller -adminaddress $var1 
        ///if ($c.Count -eq 1) {$c.ControllerVersion}
        ///if ($c.Count -gt 1) {$c[0].ControllerVersion}
        ///else {$c.ControllerVersion}.
        /// </summary>
        internal static string ControllerVersion {
            get {
                return ResourceManager.GetString("ControllerVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$desktop = get-brokerdesktop -AdminAddress $var2 -machinename $var1
        ///if ($desktop.DesktopKind -match &quot;Private&quot;)
        ///{
        ///  set-brokerprivatedesktop -machinename $desktop.MachineName -InMaintenanceMode $false
        ///}
        ///if ($desktop.DesktopKind -match &quot;Share&quot;)
        ///{
        ///set-brokershareddesktop -Machinename $var -InMaintenanceMode $false
        ///}.
        /// </summary>
        internal static string DisableMaintCatalog {
            get {
                return ResourceManager.GetString("DisableMaintCatalog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///set-brokerdesktopgroup -adminaddress $var2 -name $var1 -InMaintenanceMode $false
        ///.
        /// </summary>
        internal static string DisableMaintDG {
            get {
                return ResourceManager.GetString("DisableMaintDG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///$desktop = get-brokerdesktop -machinename $var1 -Adminaddress $var2
        ///get-brokersession -uid $desktop.SessionUID | disconnect-brokersession.
        /// </summary>
        internal static string DisconnectDesktopSession {
            get {
                return ResourceManager.GetString("DisconnectDesktopSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///foreach ($desktop in get-brokerdesktop -AdminAddress $var1 -SummaryState InUse)
        ///{ get-brokersession -uid $desktop.SessionUID | disconnect-brokersession }
        ///.
        /// </summary>
        internal static string DisconnectDesktopSessions {
            get {
                return ResourceManager.GetString("DisconnectDesktopSessions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///get-brokersession -uid $var1 -adminaddress $var2 | disconnect-brokersession.
        /// </summary>
        internal static string DisconnectSession {
            get {
                return ResourceManager.GetString("DisconnectSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$desktop = get-brokerdesktop -machinename $var1 -Adminaddress $var2
        ///if ($desktop.DesktopKind -match &quot;Private&quot;)
        ///{
        ///  set-brokerprivatedesktop -machinename $desktop.MachineName -InMaintenanceMode $true
        ///}
        ///if ($desktop.DesktopKind -match &quot;Share&quot;)
        ///{
        ///set-brokershareddesktop -Machinename $var -InMaintenanceMode $true
        ///}
        ///.
        /// </summary>
        internal static string EnableMaintCatalog {
            get {
                return ResourceManager.GetString("EnableMaintCatalog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///set-brokerdesktopgroup -name $var1 -InMaintenanceMode $true -AdminAddress $var2
        ///.
        /// </summary>
        internal static string EnableMaintDG {
            get {
                return ResourceManager.GetString("EnableMaintDG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to add-pssnapin citrix*
        ///$ErrorActionPreference=&quot;SilentlyContinue&quot;
        ///$ErrorActionPreference = &quot;Continue&quot;
        ///date | Write-Output
        ///Write-Output &quot;-------------------------------&quot;
        ///Write-Output &quot;Site Details:&quot;
        ///Get-brokersite | Write-Output
        ///Write-Output &quot;-------------------------------&quot;
        ///Write-Output &quot;Controller Details:&quot;
        ///Get-brokercontroller | Write-Output
        ///Write-Output &quot;-------------------------------&quot;
        ///Write-Output &quot;Active Site Services:&quot;
        ///foreach($broker in Get-BrokerController -AdminAddress $var1)
        ///{
        ///	$broker [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EnumSite {
            get {
                return ResourceManager.GetString("EnumSite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix*
        ///New-Item -ItemType file &quot;$PWD\evictscript.txt&quot; -Force
        ///	Add-Content &quot;$PWD\evictscript.txt&quot; &quot;---- Script to remove a controller from a XenDesktop site: execute on the principal SQL Server database 
        ///---- instance. See http://support.citrix.com/article/CTX127359 for more information.
        ///---- This script should be run either using SQLCMD from the command line or using SQL Server Management Studio 
        ///---- in SQLCMD mode. See http://support.citrix.com/article/CTX134486 for steps on removing a broker t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EvictBroker {
            get {
                return ResourceManager.GetString("EvictBroker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.Broker*
        ///asnp citrix.Configuration*
        ///
        ///$instance = Get-ConfigRegisteredServiceInstance -ServiceInstanceUid $var1 -Adminaddress $var2
        ///$instance | Unregister-ConfigRegisteredServiceInstance
        ///$instance.ServiceGroupName = $site.Name
        ///$instance | Register-ConfigRegisteredServiceInstance
        ///.
        /// </summary>
        internal static string FixServiceGroupName {
            get {
                return ResourceManager.GetString("FixServiceGroupName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.adidentity*
        ///$pools = get-acctidentitypool -AdminAddress $var1
        ///foreach ($pool in $pools)
        ///{
        ///  $pool.IdentityPoolName
        ///}
        ///.
        /// </summary>
        internal static string GetAcctIdentityPool {
            get {
                return ResourceManager.GetString("GetAcctIdentityPool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.adidentity*
        ///get-acctidentitypool -IdentityPoolName $var1 -AdminAddress $var2
        ///.
        /// </summary>
        internal static string GetAcctIdentityPoolDetails {
            get {
                return ResourceManager.GetString("GetAcctIdentityPoolDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///foreach ($session in Get-BrokerDesktop -AdminAddress $var1  -SummaryState InUse -MaxRecordCount 10000) 
        ///{ 
        ///	if ($session.SessionUserName)
        ///	{
        ///		Write-Output &quot;SessionID:$($session.SessionUID) - $($session.SessionUserName) is $($session.SessionState) on $($session.MachineName) since $($session.SessionStateChangeTime)&quot;
        ///	}
        ///}	
        ///foreach ($instance in Get-BrokerApplicationInstance -AdminAddress $var1 -MaxRecordCount 10000)
        ///{ 
        ///	$session = Get-BrokerSession -Uid $instance.SessionUid
        ///	if ($ses [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetActiveSessions {
            get {
                return ResourceManager.GetString("GetActiveSessions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///$app = Get-BrokerApplication -AdminAddress $var1 -Name $var2
        ///$icon = Get-BrokerIcon -Uid ($app.Uid + 1)
        ///$icon.EncodedIconData.
        /// </summary>
        internal static string GetAppIcon {
            get {
                return ResourceManager.GetString("GetAppIcon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///foreach ($instance in Get-BrokerApplicationInstance -AdminAddress $var1 -MaxRecordCount 10000)
        ///{ 
        ///	$session = Get-BrokerSession -Uid $instance.SessionUid
        ///    Write-Output &quot;$($instance.ApplicationName),SessionID:$($instance.SessionUID) - $($instance.UserName) has been $($session.SessionState) to $($instance.MachineName) since $($session.SessionStateChangeTime)&quot;
        ///}.
        /// </summary>
        internal static string GetAppInstances {
            get {
                return ResourceManager.GetString("GetAppInstances", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///get-brokerapplication -name $var1 -AdminAddress $var2.
        /// </summary>
        internal static string GetBrokerApplication {
            get {
                return ResourceManager.GetString("GetBrokerApplication", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$apps = get-brokerapplication -AdminAddress $var1
        ///foreach ($app in $apps) 
        ///{$app.name}.
        /// </summary>
        internal static string GetBrokerAppNames {
            get {
                return ResourceManager.GetString("GetBrokerAppNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$catalog = Get-BrokerCatalog -Name $var1 -AdminAddress $var2
        ///foreach ($property in $catalog.psobject.Properties)
        ///{
        ///	if ($property.Value)		
        ///	{
        ///		Write-Output &quot;$($property.Name):$($property.Value)&quot;
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string GetBrokerCatalog {
            get {
                return ResourceManager.GetString("GetBrokerCatalog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$result = get-brokercontroller -dnsname $var1 -AdminAddress $var2
        ///$result.ActiveSiteServices
        ///.
        /// </summary>
        internal static string GetBrokerController {
            get {
                return ResourceManager.GetString("GetBrokerController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker.admin*
        ///$brokers = get-brokercontroller -AdminAddress $var1
        ///foreach ($broker in $brokers)
        ///{
        ///	$broker.MachineName;
        ///}
        ///.
        /// </summary>
        internal static string GetBrokerControllersMachineNames {
            get {
                return ResourceManager.GetString("GetBrokerControllersMachineNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$version = Get-BrokerInstalledDbVersion -AdminAddress $var1
        ///write-output &quot;$($version.Major).$($version.Minor).$($version.Build).$($version.Revision)&quot;
        ///.
        /// </summary>
        internal static string GetBrokerDBVersion {
            get {
                return ResourceManager.GetString("GetBrokerDBVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///@($desktops)
        ///@($registeredvms)
        ///$desktops = get-brokerdesktop -maxrecordcount 20000 -AdminAddress $var1
        ///$desktopcount = @($desktops).count
        ///write-output &quot;Total Machines:&quot; $desktopcount &quot;#&quot;
        ///$groups = get-brokerdesktopgroup
        ///write-output &quot;Total Catalogs:&quot; @($groups).count &quot;#&quot;
        ///$dirtyvms = Get-BrokerDesktop -PowerActionPending $false -PowerState On -SummaryState Available -WillShutdownAfterUse $true
        ///write-output &quot;Tainted Machines:&quot; $dirtryvms.count &quot;#&quot;
        ///$registeredvms = Get-BrokerDeskt [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetBrokerDesktop {
            get {
                return ResourceManager.GetString("GetBrokerDesktop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///get-brokerdesktopgroup -name $var1 -AdminAddress $var2
        ///.
        /// </summary>
        internal static string GetBrokerDesktopGroup {
            get {
                return ResourceManager.GetString("GetBrokerDesktopGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$groups = get-brokerdesktopgroup -AdminAddress $var1
        ///foreach ($group in $groups) 
        ///{$group.name}
        ///.
        /// </summary>
        internal static string GetBrokerDesktopGroupNames {
            get {
                return ResourceManager.GetString("GetBrokerDesktopGroupNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///$group = Get-BrokerDesktopGroup -Name $var1 -AdminAddress $var2
        ///Write-Output &quot;Total Desktops:$($group.TotalDesktops):Unregistered:$($group.DesktopsUnregistered):Never:$($group.DesktopsNeverRegistered)&quot;.
        /// </summary>
        internal static string GetBrokerDesktopGroupRegistrations {
            get {
                return ResourceManager.GetString("GetBrokerDesktopGroupRegistrations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///Get-BrokerHypervisorConnection -Name $var1 -AdminAddress $var2
        ///.
        /// </summary>
        internal static string GetBrokerHypervisorConnection {
            get {
                return ResourceManager.GetString("GetBrokerHypervisorConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$hu = Get-BrokerHypervisorConnection -name $var1 -AdminAddress $var2 
        ///$hu.PreferredController
        ///.
        /// </summary>
        internal static string GetBrokerHypervisorConnectionPreferredBroker {
            get {
                return ResourceManager.GetString("GetBrokerHypervisorConnectionPreferredBroker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*; Get-BrokerHypervisorConnection -AdminAddress $var1
        ///.
        /// </summary>
        internal static string GetBrokerHypervisorConnections {
            get {
                return ResourceManager.GetString("GetBrokerHypervisorConnections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker.admin*
        ///$brokers = get-brokercontroller -AdminAddress $var1
        ///foreach ($broker in $brokers)
        ///{
        ///	$broker.DnsName;
        ///}
        ///.
        /// </summary>
        internal static string GetBrokers {
            get {
                return ResourceManager.GetString("GetBrokers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$broker = Get-BrokerController -DNSName $var1 -AdminAddress $var2
        ///Write-output &quot;$($broker.SID)&quot;.
        /// </summary>
        internal static string GetBrokerSid {
            get {
                return ResourceManager.GetString("GetBrokerSid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker.admin*
        ///$site = get-brokersite -AdminAddress $var1;
        ///$site.Name;
        ///.
        /// </summary>
        internal static string GetBrokersite {
            get {
                return ResourceManager.GetString("GetBrokersite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker.admin*
        ///get-brokersite -AdminAddress $var1
        ///.
        /// </summary>
        internal static string GetBrokersiteFull {
            get {
                return ResourceManager.GetString("GetBrokersiteFull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///foreach ($machine in get-brokermachine -CatalogName $var1 -AdminAddress $var2)
        ///{
        ///  Write-Output &quot;$($machine.MachineName):$($machine.PowerState)&quot;
        ///}.
        /// </summary>
        internal static string GetCatalogDesktop {
            get {
                return ResourceManager.GetString("GetCatalogDesktop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.B*
        ///foreach ($action in get-brokerhostingpoweraction -AdminAddress $var1 -MaxRecordCount 100 -SortBy -&apos;ActionCompletionTime&apos;)
        ///{
        ///	if ($action.State -ne &quot;Pending&quot; -and $action.State -ne &quot;Started&quot;)
        ///	{
        ///		$desktop = Get-BrokerDesktop -MachineName $action.MachineName
        ///		switch ($action.ActualPriority)
        ///		{
        ///			10 { $actionsource = &quot;&apos;User-driven restart&apos; &quot; }
        ///			20 { $actionsource = &quot;Session Launch &quot; }
        ///			30 { $actionsource = &quot;Admin &quot; }
        ///			33 { $actionsource = &quot;PVD &quot; }
        ///			40 { $actionsource = &quot;&apos; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetCompletePowerActions {
            get {
                return ResourceManager.GetString("GetCompletePowerActions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.config*
        ///get-configregisteredserviceinstance -address $var1 -AdminAddress $var2
        ///.
        /// </summary>
        internal static string GetConfigRegisteredServiceInstance {
            get {
                return ResourceManager.GetString("GetConfigRegisteredServiceInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///get-brokerdbconnection -AdminAddress $var1
        ///.
        /// </summary>
        internal static string GetDBConn {
            get {
                return ResourceManager.GetString("GetDBConn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///foreach ($hostconn in Get-BrokerHypervisorConnection -AdminAddress $var1)
        ///{ $hostconn.Name }
        ///
        ///.
        /// </summary>
        internal static string GetHostsByName {
            get {
                return ResourceManager.GetString("GetHostsByName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///foreach ($session in Get-BrokerSession -SessionState Disconnected -AdminAddress $var1) 
        ///{ 	  
        ///	if ($session.SessionUserName)
        ///	{
        ///		Write-Output &quot;SessionID:$($session.SessionUID) - $($session.SessionUserName) $($session.SessionState) from $($session.MachineName) at $($session.SessionStateChangeTime)&quot;
        ///	}
        ///}
        ///foreach ($instance in Get-BrokerApplicationInstance -AdminAddress $var1 -MaxRecordCount 10000)
        ///{ 
        ///	$session = Get-BrokerSession -Uid $instance.SessionUid
        ///	if ($session.SessionS [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetInactiveSessions {
            get {
                return ResourceManager.GetString("GetInactiveSessions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.machine*
        ///asnp citrix.Broker*
        ///asnp citrix.adidentity*
        ///foreach ($task in Get-ProvTask -AdminAddress $var1)
        ///{ 
        ///	write-output &quot;ProvTask:$($task.TaskID)#$($task.WorkflowStatus)&quot; 
        ///}
        ///foreach ($scheme in Get-ProvScheme -AdminAddress $var1)
        ///{ 
        ///	write-output &quot;ProvScheme:$($scheme.ProvisioningSchemeName)&quot; 
        ///}
        ///foreach ($catalog in get-brokercatalog -AdminAddress $var1)
        ///{
        ///	Write-Output &quot;Catalogs:$($catalog.Name)#$($catalog.CatalogKind)&quot;
        ///}
        ///foreach ($pool in get-acctidentitypool -AdminAddress $va [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetMachineInfo {
            get {
                return ResourceManager.GetString("GetMachineInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.host*
        ///$service = Get-HypService -AdminAddress $var1
        ///$items = get-childitem -path &apos;xdhyp:\hostingunits&apos;
        ///foreach ($item in $items)
        ///{	
        ///	foreach ($network in $item.NetworkPath)
        ///	{	
        ///	$network
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string GetNetworks {
            get {
                return ResourceManager.GetString("GetNetworks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp Citrix.Broker*;$site = Get-BrokerSite -AdminAddress $var3
        ///if ($var2 -match &quot;ServiceInstance&quot;) {asnp citrix.config*;$object = get-configregisteredserviceinstance -address $var1}
        ///if ($var2 -match &quot;AD Identity&quot;) {asnp citrix.adid*; $object = get-acctserviceinstance -adminaddress $var1}	
        ///if ($var2 -match &quot;Delegated&quot;) {asnp citrix.del*;$object = get-adminservice -adminaddress $var1}	
        ///if ($var2 -match &quot;Configuration&quot;) {asnp citrix.config*; $object = get-configserviceinstance -adminaddress $var1}	
        ///if ($v [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetObject {
            get {
                return ResourceManager.GetString("GetObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.B*
        ///foreach ($action in get-brokerhostingpoweraction -AdminAddress $var1 -MaxRecordCount 1000 -SortBy -&apos;ActionCompletionTime&apos; )
        ///{
        ///	if ($action.State -eq &quot;Pending&quot; -or $action.State -eq &quot;Started&quot;)
        ///	{
        ///		if ($action.ActualPriority -eq 10)
        ///		{
        ///			write-output &quot;UID:$($action.UID):Status:$($action.State): User-driven restart initiated a $($action.Action) action for $($action.MachineName) at $($action.ActionStartTime)&quot;
        ///		}
        ///		if ($action.ActualPriority -eq 20)
        ///		{
        ///			write-output &quot;UID:$($actio [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetPendingPowerActions {
            get {
                return ResourceManager.GetString("GetPendingPowerActions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.machinec*
        ///$scheme = get-provscheme -ProvisioningSchemeName $var1 -AdminAddress $var2
        ///foreach ($property in $scheme.psobject.Properties)
        ///{
        ///	if ($property.Value)
        ///	{
        ///		Write-Output &quot;$($property.Name):$($property.Value)&quot;
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string GetProvScheme {
            get {
                return ResourceManager.GetString("GetProvScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.machine*
        ///get-provtask -taskid $var1 -AdminAddress $var2
        ///.
        /// </summary>
        internal static string GetProvTask {
            get {
                return ResourceManager.GetString("GetProvTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.host*
        ///$service = Get-HypService -AdminAddress $var1
        ///$items = get-childitem -path &apos;xdhyp:\hostingunits&apos;
        ///foreach ($item in $items)
        ///{	
        ///	foreach ($storage in $item.PersonalvDiskStorage)
        ///	{	
        ///	$storage.StoragePath
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string GetPvdStorages {
            get {
                return ResourceManager.GetString("GetPvdStorages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///$desktops = Get-BrokerDesktop -AdminAddress $var2 -DesktopGroupName $var1 -RegistrationState Registered -MaxRecordCount 10000;
        ///if ($desktops)
        ///{
        ///foreach ($desktop in $desktops)
        ///{
        ///Write-Output &quot;$($desktop.MachineName):$($desktop.DNSName):$($desktop.RegistrationState):$($desktop.PowerState):$($desktop.DesktopGroupName)&quot;
        ///}
        ///}
        ///else { Write-Output &quot;None&quot;}.
        /// </summary>
        internal static string GetRegisteredAssignmentDesktops {
            get {
                return ResourceManager.GetString("GetRegisteredAssignmentDesktops", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $strComputer = $var1
        ///$strKeyPath = $var2
        ///$strValueName2 = $var3 
        ///$reg = Get-WmiObject -List -Namespace root\default -ComputerName $strComputer | Where-Object {$_.Name -eq &quot;StdRegProv&quot;}
        ///if ($strValueName2 -eq &quot;Counter&quot;)
        ///{
        ///	$strValue2 = $reg.GetMultiStringValue(2147483650,$strKeyPath,$strValueName2)
        ///}
        ///else { $strValue2 = $reg.GetStringValue(2147483650,$strKeyPath,$strValueName2) }
        ///if ($strValue2.sValue -eq $null)
        ///{
        ///	Write-Output &quot;Not Found&quot;
        ///}
        ///else { if ($strValueName2 -eq &quot;Counter&quot;) {$strValue2.s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetRegValue {
            get {
                return ResourceManager.GetString("GetRegValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.config*
        ///$services = get-configregisteredserviceinstance -AdminAddress $var1
        ///foreach ($service in $services)
        ///{
        ///	Write-Output &quot;$($service.ServiceType),$($service.address)&quot;;
        ///}
        ///.
        /// </summary>
        internal static string GetServices {
            get {
                return ResourceManager.GetString("GetServices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.host*
        ///$service = Get-HypService -AdminAddress $var1
        ///$items = get-childitem -path &apos;xdhyp:\hostingunits&apos;
        ///foreach ($item in $items)
        ///{	
        ///	foreach ($storage in $item.Storage)
        ///	{	
        ///	$storage.StoragePath
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string GetStorages {
            get {
                return ResourceManager.GetString("GetStorages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///$desktops = Get-BrokerDesktop -DesktopGroupName $var1 -RegistrationState Unregistered -MaxRecordCount 10000 -AdminAddress $var2;
        ///if ($desktops)
        ///{
        ///foreach ($desktop in $desktops)
        ///{
        ///Write-Output &quot;$($desktop.MachineName):$($desktop.DNSName):$($desktop.RegistrationState):$($desktop.PowerState):$($desktop.DesktopGroupName)&quot;
        ///}
        ///}
        ///else { Write-Output &quot;None&quot;}.
        /// </summary>
        internal static string GetUnregisteredAssignmentDesktop {
            get {
                return ResourceManager.GetString("GetUnregisteredAssignmentDesktop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.B*
        ///$unregisteredPoweredOn = Get-BrokerDesktop -SummaryState Unregistered -DesktopGroupName $var1 -AdminAddress $var2
        ///
        ///foreach ($desktop in $unregisteredPoweredOn)
        ///{
        ///  $desktop.DNSName
        ///}.
        /// </summary>
        internal static string GetUnregisteredPoweredOn {
            get {
                return ResourceManager.GetString("GetUnregisteredPoweredOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///$desktop = get-brokerdesktop -machinename $var1 -AdminAddress $var2
        ///get-brokersession -uid $desktop.SessionUID | stop-brokersession.
        /// </summary>
        internal static string LogoffDesktopSession {
            get {
                return ResourceManager.GetString("LogoffDesktopSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///$site = Get-BrokerSite -AdminAddress $var2
        ///if ($var1 -eq &quot;active&quot;)
        ///{ 
        ///foreach ($desktop in get-brokerdesktop -SummaryState InUse)
        ///{ get-brokersession -uid $desktop.SessionUID | stop-brokersession }
        ///}
        ///if ($var1 -eq &quot;inactive&quot;)
        ///{
        ///foreach ($desktop in get-brokerdesktop -SummaryState Disconnected)
        ///{ get-brokersession -uid $desktop.SessionUID | stop-brokersession }
        ///}
        ///.
        /// </summary>
        internal static string LogoffDesktopSessions {
            get {
                return ResourceManager.GetString("LogoffDesktopSessions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///get-brokersession -uid $var1 -AdminAddress $var2 | stop-brokersession.
        /// </summary>
        internal static string LogoffSession {
            get {
                return ResourceManager.GetString("LogoffSession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.b*
        ///New-BrokerHostingPowerAction -MachineName $var1 -Action $var2 -AdminAddress $var3
        ///.
        /// </summary>
        internal static string PowerAction {
            get {
                return ResourceManager.GetString("PowerAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.machine*
        ///remove-provtask -AdminAddress $var2 -taskid $var1
        ///.
        /// </summary>
        internal static string RemoveProvTask {
            get {
                return ResourceManager.GetString("RemoveProvTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.machinec*
        ///foreach ($task in Get-ProvTask -AdminAddress $var2)
        ///{ 
        ///if ($task.WorkFlowStatus -eq $var1)
        ///	{ 
        ///	  	if ($var1 -eq &quot;Completed&quot; -or $var1 -eq &quot;Terminated&quot;)	
        ///		{ 
        ///			remove-provtask -taskid $task.TaskId 
        ///	  	}   
        ///	  	if ($var1 -eq &quot;Running&quot;)  
        ///	  	{ 
        ///			stop-provtask -taskid $task.TaskId 
        ///		} 
        ///	} 
        ///}.
        /// </summary>
        internal static string RemoveProvTasks {
            get {
                return ResourceManager.GetString("RemoveProvTasks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.host*
        ///$service = Get-HypService -AdminAddress $var3
        ///$items = get-childitem -path &apos;xdhyp:\hostingunits&apos;
        ///foreach ($item in $items)
        ///{	
        ///	if ($item.PSChildName -eq $var1)
        ///	{
        ///		foreach ($storage in $item.PersonalvdiskStorage)
        ///		{
        ///			if ($storage -match $var2)
        ///			{
        ///				Remove-HypHostingUnitStorage -LiteralPath $item.PSPath -StoragePath $storage -StorageType PersonalvDiskStorage
        ///			}}}}
        ///.
        /// </summary>
        internal static string RemovePvdStorage {
            get {
                return ResourceManager.GetString("RemovePvdStorage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.host*
        ///$service = Get-HypService -AdminAddress $var3
        ///$items = get-childitem -path &apos;xdhyp:\hostingunits&apos;
        ///foreach ($item in $items)
        ///{	
        ///	if ($item.PSChildName -eq $var1)
        ///	{
        ///		foreach ($storage in $item.Storage)
        ///		{
        ///			if ($storage -match $var2)
        ///			{
        ///				Remove-HypHostingUnitStorage -LiteralPath $item.PSPath -StoragePath $storage
        ///			}}}}
        ///.
        /// </summary>
        internal static string RemoveStorage {
            get {
                return ResourceManager.GetString("RemoveStorage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $erroractionpreference = &quot;Continue&quot;
        ///asnp citrix.*
        ///foreach ($service in Get-ConfigRegisteredServiceInstance -AdminAddress $var1)
        ///{
        ///	$address = $service.Address
        ///	if ($address.Contains($var) -and $address -notmatch &quot;Licensing&quot;)
        ///	{
        ///		try{$service|Unregister-ConfigRegisteredServiceInstance}
        ///		catch{}
        ///	}
        ///}
        ///foreach ($controller in Get-BrokerController){$vars += @($controller.DNSName)} #Get each DDC’s DNS name
        ///foreach ($var in $vars){ #Register each DDC’s service instances
        ///
        ///	try{Get-ConfigServiceInsta [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string resetbrokerserviceinstances {
            get {
                return ResourceManager.GetString("resetbrokerserviceinstances", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $ddcs = @() #Declare array 
        ///asnp citrix*
        ///$instances = Get-ConfigRegisteredServiceInstance -AdminAddress $var1
        ///foreach ($instance in $instances)
        ///{
        ///	if ($instance.Address -notmatch &quot;Licensing&quot;)
        ///	{
        ///		$instance|Unregister-ConfigRegisteredServiceInstance
        ///	}
        ///}
        ///foreach ($controller in Get-BrokerController){$ddcs += @($controller.DNSName)} #Get each DDC’s DNS name
        ///foreach ($ddc in $ddcs){ #Register each DDC’s service instances
        ///
        ///	try{Get-ConfigServiceInstance -adminaddress $ddc | Register-ConfigServiceI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ResetInstances {
            get {
                return ResourceManager.GetString("ResetInstances", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CDFMonitor.
        /// </summary>
        internal static string ServiceName {
            get {
                return ResourceManager.GetString("ServiceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.Broker*
        ///$site = get-brokersite -adminaddress $var15
        ///if ($var1 -eq &quot;True&quot;){$apofa = $true}
        ///else {$apofa = $false}
        ///if ($var13 -eq &quot;True&quot;){$sddau = $true}
        ///else {$sddau = $false}
        ///Set-BrokerDesktopGroup -AutomaticPowerOnForAssigned $apofa -ColorDepth $var2 -OffPeakBufferSizePercent $var3 -OffPeakDisconnectAction $var4 -OffPeakDisconnectTimeout $var5 -OffPeakLogOffAction $var6 -OffPeakLogoffTimeout $var7 -PeakBufferSizePercent $var8 -PeakDisconnectAction $var9 -PeakDisconnectTimeout $var10 -Peak [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SetBrokerDesktopGroup {
            get {
                return ResourceManager.GetString("SetBrokerDesktopGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$ddc = $var1 
        ///$service = $var2 
        ///Set-BrokerHypervisorConnection –Name &quot;$service&quot; -PreferredController $ddc -AdminAddress $var3
        ///.
        /// </summary>
        internal static string SetBrokerHypervisorConnection {
            get {
                return ResourceManager.GetString("SetBrokerHypervisorConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.machine*
        ///stop-provtask -taskid $var1 -AdminAddress $var2
        ///.
        /// </summary>
        internal static string StopProvTask {
            get {
                return ResourceManager.GetString("StopProvTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.broker*
        ///$result = get-brokersite -address $var1
        ///$result.
        /// </summary>
        internal static string TestAuth {
            get {
                return ResourceManager.GetString("TestAuth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.config* 
        ///$result = get-configregisteredserviceinstance -address $var1 -AdminAddress $var2 | Test-ConfigServiceInstanceAvailability 
        ///$result.Status
        ///.
        /// </summary>
        internal static string TestInstance {
            get {
                return ResourceManager.GetString("TestInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asnp citrix.bro*; Try { $site = Get-BrokerSite -adminaddress $var1 ; &quot;Local&quot; } catch [Exception] {
        ///   return $_.Exception.Message
        ///}.
        /// </summary>
        internal static string TestSiteConn {
            get {
                return ResourceManager.GetString("TestSiteConn", resourceCulture);
            }
        }
    }
}
